// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String
  photoUrl     String
  UserAnswer   UserAnswer[]
  UserProgress UserProgress[]
  Quiz         Quiz[]
}

model Theme {
  id          String  @id @default(uuid())
  label       String
  description String?
  photoUrl    String?

  quizzes Quiz[]
}

model Quiz {
  id       String  @id @default(uuid())
  label    String
  photoUrl String?
  level    Level
  topics   Topic[]
  themeId  String?
  theme    Theme?  @relation(fields: [themeId], references: [id], onDelete: Cascade)
  authorId String? // Identifica o criador do quiz, se necessário
  author   User?   @relation(fields: [authorId], references: [id])

  @@map("quizzes")
}

model Topic {
  id           String         @id @default(uuid())
  title        String
  quizId       String
  quiz         Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questions    Question[]
  UserProgress UserProgress[]
}

model Question {
  id          String   @id @default(uuid())
  title       String
  description String?
  photoUrl    String?
  topicId     String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  answers     Answer[]

  UserAnswer UserAnswer[]
}

model Answer {
  id         String   @id @default(uuid())
  label      String
  isRight    Boolean  @default(false)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  UserAnswer UserAnswer[]

  @@map("answers")
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String
  topicId   String
  quizId    String? // Relaciona progresso ao quiz, se necessário
  completed Boolean @default(false)

  user  User  @relation(fields: [userId], references: [id])
  topic Topic @relation(fields: [topicId], references: [id])

  @@unique([userId, topicId]) // Um usuário só pode ter um registro por tópico
}

model UserAnswer {
  id         String  @id @default(uuid())
  userId     String
  questionId String
  answerId   String
  isCorrect  Boolean @default(false)

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
  answer   Answer   @relation(fields: [answerId], references: [id])

  @@map("user_answers")
}

enum Level {
  facil
  medio
  dificil
  perito
}
